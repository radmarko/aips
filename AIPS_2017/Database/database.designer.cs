#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AIPS2017_Database")]
	public partial class databaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBoard(Board instance);
    partial void UpdateBoard(Board instance);
    partial void DeleteBoard(Board instance);
    partial void InsertBox(Box instance);
    partial void UpdateBox(Box instance);
    partial void DeleteBox(Box instance);
    partial void InsertDoor(Door instance);
    partial void UpdateDoor(Door instance);
    partial void DeleteDoor(Door instance);
    partial void InsertDrawer(Drawer instance);
    partial void UpdateDrawer(Drawer instance);
    partial void DeleteDrawer(Drawer instance);
    partial void InsertPlan(Plan instance);
    partial void UpdatePlan(Plan instance);
    partial void DeletePlan(Plan instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public databaseDataContext() : 
				base(global::Database.Properties.Settings.Default.AIPS2017_DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Board> Boards
		{
			get
			{
				return this.GetTable<Board>();
			}
		}
		
		public System.Data.Linq.Table<Box> Boxes
		{
			get
			{
				return this.GetTable<Box>();
			}
		}
		
		public System.Data.Linq.Table<Door> Doors
		{
			get
			{
				return this.GetTable<Door>();
			}
		}
		
		public System.Data.Linq.Table<Drawer> Drawers
		{
			get
			{
				return this.GetTable<Drawer>();
			}
		}
		
		public System.Data.Linq.Table<Plan> Plans
		{
			get
			{
				return this.GetTable<Plan>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Board")]
	public partial class Board : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BoxId;
		
		private float _Width;
		
		private float _Height;
		
		private float _Depth;
		
		private float _BoardThickness;
		
		private float _PositionX;
		
		private float _PositionY;
		
		private float _PositionZ;
		
		private string _Name;
		
		private string _Texture;
		
		private EntityRef<Box> _Box;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBoxIdChanging(int value);
    partial void OnBoxIdChanged();
    partial void OnWidthChanging(float value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(float value);
    partial void OnHeightChanged();
    partial void OnDepthChanging(float value);
    partial void OnDepthChanged();
    partial void OnBoardThicknessChanging(float value);
    partial void OnBoardThicknessChanged();
    partial void OnPositionXChanging(float value);
    partial void OnPositionXChanged();
    partial void OnPositionYChanging(float value);
    partial void OnPositionYChanged();
    partial void OnPositionZChanging(float value);
    partial void OnPositionZChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextureChanging(string value);
    partial void OnTextureChanged();
    #endregion
		
		public Board()
		{
			this._Box = default(EntityRef<Box>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxId", DbType="Int NOT NULL")]
		public int BoxId
		{
			get
			{
				return this._BoxId;
			}
			set
			{
				if ((this._BoxId != value))
				{
					if (this._Box.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxIdChanging(value);
					this.SendPropertyChanging();
					this._BoxId = value;
					this.SendPropertyChanged("BoxId");
					this.OnBoxIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Real NOT NULL")]
		public float Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Real NOT NULL")]
		public float Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Real NOT NULL")]
		public float Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this.OnDepthChanging(value);
					this.SendPropertyChanging();
					this._Depth = value;
					this.SendPropertyChanged("Depth");
					this.OnDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardThickness", DbType="Real NOT NULL")]
		public float BoardThickness
		{
			get
			{
				return this._BoardThickness;
			}
			set
			{
				if ((this._BoardThickness != value))
				{
					this.OnBoardThicknessChanging(value);
					this.SendPropertyChanging();
					this._BoardThickness = value;
					this.SendPropertyChanged("BoardThickness");
					this.OnBoardThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionX", DbType="Real NOT NULL")]
		public float PositionX
		{
			get
			{
				return this._PositionX;
			}
			set
			{
				if ((this._PositionX != value))
				{
					this.OnPositionXChanging(value);
					this.SendPropertyChanging();
					this._PositionX = value;
					this.SendPropertyChanged("PositionX");
					this.OnPositionXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionY", DbType="Real NOT NULL")]
		public float PositionY
		{
			get
			{
				return this._PositionY;
			}
			set
			{
				if ((this._PositionY != value))
				{
					this.OnPositionYChanging(value);
					this.SendPropertyChanging();
					this._PositionY = value;
					this.SendPropertyChanged("PositionY");
					this.OnPositionYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionZ", DbType="Real NOT NULL")]
		public float PositionZ
		{
			get
			{
				return this._PositionZ;
			}
			set
			{
				if ((this._PositionZ != value))
				{
					this.OnPositionZChanging(value);
					this.SendPropertyChanging();
					this._PositionZ = value;
					this.SendPropertyChanged("PositionZ");
					this.OnPositionZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Texture", DbType="VarChar(MAX)")]
		public string Texture
		{
			get
			{
				return this._Texture;
			}
			set
			{
				if ((this._Texture != value))
				{
					this.OnTextureChanging(value);
					this.SendPropertyChanging();
					this._Texture = value;
					this.SendPropertyChanged("Texture");
					this.OnTextureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_Board", Storage="_Box", ThisKey="BoxId", OtherKey="Id", IsForeignKey=true)]
		public Box Box
		{
			get
			{
				return this._Box.Entity;
			}
			set
			{
				Box previousValue = this._Box.Entity;
				if (((previousValue != value) 
							|| (this._Box.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Box.Entity = null;
						previousValue.Boards.Remove(this);
					}
					this._Box.Entity = value;
					if ((value != null))
					{
						value.Boards.Add(this);
						this._BoxId = value.Id;
					}
					else
					{
						this._BoxId = default(int);
					}
					this.SendPropertyChanged("Box");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Box")]
	public partial class Box : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PlanId;
		
		private float _Width;
		
		private float _Height;
		
		private float _Depth;
		
		private float _BoardThickness;
		
		private float _PositionX;
		
		private float _PositionY;
		
		private float _PositionZ;
		
		private string _Name;
		
		private string _Texture;
		
		private bool _vertikalno;
		
		private bool _horizontalno;
		
		private float _globalX;
		
		private float _globalY;
		
		private float _globalZ;
		
		private EntitySet<Board> _Boards;
		
		private EntitySet<Door> _Doors;
		
		private EntitySet<Drawer> _Drawers;
		
		private EntityRef<Plan> _Plan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlanIdChanging(int value);
    partial void OnPlanIdChanged();
    partial void OnWidthChanging(float value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(float value);
    partial void OnHeightChanged();
    partial void OnDepthChanging(float value);
    partial void OnDepthChanged();
    partial void OnBoardThicknessChanging(float value);
    partial void OnBoardThicknessChanged();
    partial void OnPositionXChanging(float value);
    partial void OnPositionXChanged();
    partial void OnPositionYChanging(float value);
    partial void OnPositionYChanged();
    partial void OnPositionZChanging(float value);
    partial void OnPositionZChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextureChanging(string value);
    partial void OnTextureChanged();
    partial void OnvertikalnoChanging(bool value);
    partial void OnvertikalnoChanged();
    partial void OnhorizontalnoChanging(bool value);
    partial void OnhorizontalnoChanged();
    partial void OnglobalXChanging(float value);
    partial void OnglobalXChanged();
    partial void OnglobalYChanging(float value);
    partial void OnglobalYChanged();
    partial void OnglobalZChanging(float value);
    partial void OnglobalZChanged();
    #endregion
		
		public Box()
		{
			this._Boards = new EntitySet<Board>(new Action<Board>(this.attach_Boards), new Action<Board>(this.detach_Boards));
			this._Doors = new EntitySet<Door>(new Action<Door>(this.attach_Doors), new Action<Door>(this.detach_Doors));
			this._Drawers = new EntitySet<Drawer>(new Action<Drawer>(this.attach_Drawers), new Action<Drawer>(this.detach_Drawers));
			this._Plan = default(EntityRef<Plan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanId", DbType="Int NOT NULL")]
		public int PlanId
		{
			get
			{
				return this._PlanId;
			}
			set
			{
				if ((this._PlanId != value))
				{
					if (this._Plan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanIdChanging(value);
					this.SendPropertyChanging();
					this._PlanId = value;
					this.SendPropertyChanged("PlanId");
					this.OnPlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Real NOT NULL")]
		public float Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Real NOT NULL")]
		public float Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Real NOT NULL")]
		public float Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this.OnDepthChanging(value);
					this.SendPropertyChanging();
					this._Depth = value;
					this.SendPropertyChanged("Depth");
					this.OnDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardThickness", DbType="Real NOT NULL")]
		public float BoardThickness
		{
			get
			{
				return this._BoardThickness;
			}
			set
			{
				if ((this._BoardThickness != value))
				{
					this.OnBoardThicknessChanging(value);
					this.SendPropertyChanging();
					this._BoardThickness = value;
					this.SendPropertyChanged("BoardThickness");
					this.OnBoardThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionX", DbType="Real NOT NULL")]
		public float PositionX
		{
			get
			{
				return this._PositionX;
			}
			set
			{
				if ((this._PositionX != value))
				{
					this.OnPositionXChanging(value);
					this.SendPropertyChanging();
					this._PositionX = value;
					this.SendPropertyChanged("PositionX");
					this.OnPositionXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionY", DbType="Real NOT NULL")]
		public float PositionY
		{
			get
			{
				return this._PositionY;
			}
			set
			{
				if ((this._PositionY != value))
				{
					this.OnPositionYChanging(value);
					this.SendPropertyChanging();
					this._PositionY = value;
					this.SendPropertyChanged("PositionY");
					this.OnPositionYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionZ", DbType="Real NOT NULL")]
		public float PositionZ
		{
			get
			{
				return this._PositionZ;
			}
			set
			{
				if ((this._PositionZ != value))
				{
					this.OnPositionZChanging(value);
					this.SendPropertyChanging();
					this._PositionZ = value;
					this.SendPropertyChanged("PositionZ");
					this.OnPositionZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Texture", DbType="VarChar(MAX)")]
		public string Texture
		{
			get
			{
				return this._Texture;
			}
			set
			{
				if ((this._Texture != value))
				{
					this.OnTextureChanging(value);
					this.SendPropertyChanging();
					this._Texture = value;
					this.SendPropertyChanged("Texture");
					this.OnTextureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vertikalno", DbType="Bit NOT NULL")]
		public bool vertikalno
		{
			get
			{
				return this._vertikalno;
			}
			set
			{
				if ((this._vertikalno != value))
				{
					this.OnvertikalnoChanging(value);
					this.SendPropertyChanging();
					this._vertikalno = value;
					this.SendPropertyChanged("vertikalno");
					this.OnvertikalnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_horizontalno", DbType="Bit NOT NULL")]
		public bool horizontalno
		{
			get
			{
				return this._horizontalno;
			}
			set
			{
				if ((this._horizontalno != value))
				{
					this.OnhorizontalnoChanging(value);
					this.SendPropertyChanging();
					this._horizontalno = value;
					this.SendPropertyChanged("horizontalno");
					this.OnhorizontalnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_globalX", DbType="Real NOT NULL")]
		public float globalX
		{
			get
			{
				return this._globalX;
			}
			set
			{
				if ((this._globalX != value))
				{
					this.OnglobalXChanging(value);
					this.SendPropertyChanging();
					this._globalX = value;
					this.SendPropertyChanged("globalX");
					this.OnglobalXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_globalY", DbType="Real NOT NULL")]
		public float globalY
		{
			get
			{
				return this._globalY;
			}
			set
			{
				if ((this._globalY != value))
				{
					this.OnglobalYChanging(value);
					this.SendPropertyChanging();
					this._globalY = value;
					this.SendPropertyChanged("globalY");
					this.OnglobalYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_globalZ", DbType="Real NOT NULL")]
		public float globalZ
		{
			get
			{
				return this._globalZ;
			}
			set
			{
				if ((this._globalZ != value))
				{
					this.OnglobalZChanging(value);
					this.SendPropertyChanging();
					this._globalZ = value;
					this.SendPropertyChanged("globalZ");
					this.OnglobalZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_Board", Storage="_Boards", ThisKey="Id", OtherKey="BoxId")]
		public EntitySet<Board> Boards
		{
			get
			{
				return this._Boards;
			}
			set
			{
				this._Boards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_Door", Storage="_Doors", ThisKey="Id", OtherKey="BoxId")]
		public EntitySet<Door> Doors
		{
			get
			{
				return this._Doors;
			}
			set
			{
				this._Doors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_Drawer", Storage="_Drawers", ThisKey="Id", OtherKey="BoxId")]
		public EntitySet<Drawer> Drawers
		{
			get
			{
				return this._Drawers;
			}
			set
			{
				this._Drawers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plan_Box", Storage="_Plan", ThisKey="PlanId", OtherKey="Id", IsForeignKey=true)]
		public Plan Plan
		{
			get
			{
				return this._Plan.Entity;
			}
			set
			{
				Plan previousValue = this._Plan.Entity;
				if (((previousValue != value) 
							|| (this._Plan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plan.Entity = null;
						previousValue.Boxes.Remove(this);
					}
					this._Plan.Entity = value;
					if ((value != null))
					{
						value.Boxes.Add(this);
						this._PlanId = value.Id;
					}
					else
					{
						this._PlanId = default(int);
					}
					this.SendPropertyChanged("Plan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boards(Board entity)
		{
			this.SendPropertyChanging();
			entity.Box = this;
		}
		
		private void detach_Boards(Board entity)
		{
			this.SendPropertyChanging();
			entity.Box = null;
		}
		
		private void attach_Doors(Door entity)
		{
			this.SendPropertyChanging();
			entity.Box = this;
		}
		
		private void detach_Doors(Door entity)
		{
			this.SendPropertyChanging();
			entity.Box = null;
		}
		
		private void attach_Drawers(Drawer entity)
		{
			this.SendPropertyChanging();
			entity.Box = this;
		}
		
		private void detach_Drawers(Drawer entity)
		{
			this.SendPropertyChanging();
			entity.Box = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Door")]
	public partial class Door : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BoxId;
		
		private float _Width;
		
		private float _Height;
		
		private float _Depth;
		
		private float _PositionX;
		
		private float _PositionY;
		
		private float _PositionZ;
		
		private string _Name;
		
		private string _Texture;
		
		private int _pregrada;
		
		private EntityRef<Box> _Box;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBoxIdChanging(int value);
    partial void OnBoxIdChanged();
    partial void OnWidthChanging(float value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(float value);
    partial void OnHeightChanged();
    partial void OnDepthChanging(float value);
    partial void OnDepthChanged();
    partial void OnPositionXChanging(float value);
    partial void OnPositionXChanged();
    partial void OnPositionYChanging(float value);
    partial void OnPositionYChanged();
    partial void OnPositionZChanging(float value);
    partial void OnPositionZChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextureChanging(string value);
    partial void OnTextureChanged();
    partial void OnpregradaChanging(int value);
    partial void OnpregradaChanged();
    #endregion
		
		public Door()
		{
			this._Box = default(EntityRef<Box>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxId", DbType="Int NOT NULL")]
		public int BoxId
		{
			get
			{
				return this._BoxId;
			}
			set
			{
				if ((this._BoxId != value))
				{
					if (this._Box.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxIdChanging(value);
					this.SendPropertyChanging();
					this._BoxId = value;
					this.SendPropertyChanged("BoxId");
					this.OnBoxIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Real NOT NULL")]
		public float Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Real NOT NULL")]
		public float Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Real NOT NULL")]
		public float Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this.OnDepthChanging(value);
					this.SendPropertyChanging();
					this._Depth = value;
					this.SendPropertyChanged("Depth");
					this.OnDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionX", DbType="Real NOT NULL")]
		public float PositionX
		{
			get
			{
				return this._PositionX;
			}
			set
			{
				if ((this._PositionX != value))
				{
					this.OnPositionXChanging(value);
					this.SendPropertyChanging();
					this._PositionX = value;
					this.SendPropertyChanged("PositionX");
					this.OnPositionXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionY", DbType="Real NOT NULL")]
		public float PositionY
		{
			get
			{
				return this._PositionY;
			}
			set
			{
				if ((this._PositionY != value))
				{
					this.OnPositionYChanging(value);
					this.SendPropertyChanging();
					this._PositionY = value;
					this.SendPropertyChanged("PositionY");
					this.OnPositionYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionZ", DbType="Real NOT NULL")]
		public float PositionZ
		{
			get
			{
				return this._PositionZ;
			}
			set
			{
				if ((this._PositionZ != value))
				{
					this.OnPositionZChanging(value);
					this.SendPropertyChanging();
					this._PositionZ = value;
					this.SendPropertyChanged("PositionZ");
					this.OnPositionZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Texture", DbType="VarChar(MAX)")]
		public string Texture
		{
			get
			{
				return this._Texture;
			}
			set
			{
				if ((this._Texture != value))
				{
					this.OnTextureChanging(value);
					this.SendPropertyChanging();
					this._Texture = value;
					this.SendPropertyChanged("Texture");
					this.OnTextureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pregrada", DbType="Int NOT NULL")]
		public int pregrada
		{
			get
			{
				return this._pregrada;
			}
			set
			{
				if ((this._pregrada != value))
				{
					this.OnpregradaChanging(value);
					this.SendPropertyChanging();
					this._pregrada = value;
					this.SendPropertyChanged("pregrada");
					this.OnpregradaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_Door", Storage="_Box", ThisKey="BoxId", OtherKey="Id", IsForeignKey=true)]
		public Box Box
		{
			get
			{
				return this._Box.Entity;
			}
			set
			{
				Box previousValue = this._Box.Entity;
				if (((previousValue != value) 
							|| (this._Box.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Box.Entity = null;
						previousValue.Doors.Remove(this);
					}
					this._Box.Entity = value;
					if ((value != null))
					{
						value.Doors.Add(this);
						this._BoxId = value.Id;
					}
					else
					{
						this._BoxId = default(int);
					}
					this.SendPropertyChanged("Box");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drawer")]
	public partial class Drawer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BoxId;
		
		private float _Width;
		
		private float _Height;
		
		private float _Depth;
		
		private float _BoardThickness;
		
		private float _PositionX;
		
		private float _PositionY;
		
		private float _PositionZ;
		
		private string _Name;
		
		private string _Texture;
		
		private int _pregrada;
		
		private EntityRef<Box> _Box;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBoxIdChanging(int value);
    partial void OnBoxIdChanged();
    partial void OnWidthChanging(float value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(float value);
    partial void OnHeightChanged();
    partial void OnDepthChanging(float value);
    partial void OnDepthChanged();
    partial void OnBoardThicknessChanging(float value);
    partial void OnBoardThicknessChanged();
    partial void OnPositionXChanging(float value);
    partial void OnPositionXChanged();
    partial void OnPositionYChanging(float value);
    partial void OnPositionYChanged();
    partial void OnPositionZChanging(float value);
    partial void OnPositionZChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextureChanging(string value);
    partial void OnTextureChanged();
    partial void OnpregradaChanging(int value);
    partial void OnpregradaChanged();
    #endregion
		
		public Drawer()
		{
			this._Box = default(EntityRef<Box>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxId", DbType="Int NOT NULL")]
		public int BoxId
		{
			get
			{
				return this._BoxId;
			}
			set
			{
				if ((this._BoxId != value))
				{
					if (this._Box.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoxIdChanging(value);
					this.SendPropertyChanging();
					this._BoxId = value;
					this.SendPropertyChanged("BoxId");
					this.OnBoxIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Real NOT NULL")]
		public float Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Real NOT NULL")]
		public float Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Depth", DbType="Real NOT NULL")]
		public float Depth
		{
			get
			{
				return this._Depth;
			}
			set
			{
				if ((this._Depth != value))
				{
					this.OnDepthChanging(value);
					this.SendPropertyChanging();
					this._Depth = value;
					this.SendPropertyChanged("Depth");
					this.OnDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardThickness", DbType="Real NOT NULL")]
		public float BoardThickness
		{
			get
			{
				return this._BoardThickness;
			}
			set
			{
				if ((this._BoardThickness != value))
				{
					this.OnBoardThicknessChanging(value);
					this.SendPropertyChanging();
					this._BoardThickness = value;
					this.SendPropertyChanged("BoardThickness");
					this.OnBoardThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionX", DbType="Real NOT NULL")]
		public float PositionX
		{
			get
			{
				return this._PositionX;
			}
			set
			{
				if ((this._PositionX != value))
				{
					this.OnPositionXChanging(value);
					this.SendPropertyChanging();
					this._PositionX = value;
					this.SendPropertyChanged("PositionX");
					this.OnPositionXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionY", DbType="Real NOT NULL")]
		public float PositionY
		{
			get
			{
				return this._PositionY;
			}
			set
			{
				if ((this._PositionY != value))
				{
					this.OnPositionYChanging(value);
					this.SendPropertyChanging();
					this._PositionY = value;
					this.SendPropertyChanged("PositionY");
					this.OnPositionYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionZ", DbType="Real NOT NULL")]
		public float PositionZ
		{
			get
			{
				return this._PositionZ;
			}
			set
			{
				if ((this._PositionZ != value))
				{
					this.OnPositionZChanging(value);
					this.SendPropertyChanging();
					this._PositionZ = value;
					this.SendPropertyChanged("PositionZ");
					this.OnPositionZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Texture", DbType="VarChar(MAX)")]
		public string Texture
		{
			get
			{
				return this._Texture;
			}
			set
			{
				if ((this._Texture != value))
				{
					this.OnTextureChanging(value);
					this.SendPropertyChanging();
					this._Texture = value;
					this.SendPropertyChanged("Texture");
					this.OnTextureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pregrada", DbType="Int NOT NULL")]
		public int pregrada
		{
			get
			{
				return this._pregrada;
			}
			set
			{
				if ((this._pregrada != value))
				{
					this.OnpregradaChanging(value);
					this.SendPropertyChanging();
					this._pregrada = value;
					this.SendPropertyChanged("pregrada");
					this.OnpregradaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_Drawer", Storage="_Box", ThisKey="BoxId", OtherKey="Id", IsForeignKey=true)]
		public Box Box
		{
			get
			{
				return this._Box.Entity;
			}
			set
			{
				Box previousValue = this._Box.Entity;
				if (((previousValue != value) 
							|| (this._Box.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Box.Entity = null;
						previousValue.Drawers.Remove(this);
					}
					this._Box.Entity = value;
					if ((value != null))
					{
						value.Drawers.Add(this);
						this._BoxId = value.Id;
					}
					else
					{
						this._BoxId = default(int);
					}
					this.SendPropertyChanged("Box");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Plan]")]
	public partial class Plan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private string _Name;
		
		private EntitySet<Box> _Boxes;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Plan()
		{
			this._Boxes = new EntitySet<Box>(new Action<Box>(this.attach_Boxes), new Action<Box>(this.detach_Boxes));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plan_Box", Storage="_Boxes", ThisKey="Id", OtherKey="PlanId")]
		public EntitySet<Box> Boxes
		{
			get
			{
				return this._Boxes;
			}
			set
			{
				this._Boxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Plan", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Plans.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Plans.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boxes(Box entity)
		{
			this.SendPropertyChanging();
			entity.Plan = this;
		}
		
		private void detach_Boxes(Box entity)
		{
			this.SendPropertyChanging();
			entity.Plan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Status;
		
		private EntitySet<Plan> _Plans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public User()
		{
			this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Plan", Storage="_Plans", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Plan> Plans
		{
			get
			{
				return this._Plans;
			}
			set
			{
				this._Plans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Plans(Plan entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Plans(Plan entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
